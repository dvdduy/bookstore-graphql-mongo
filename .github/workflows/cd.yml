name: CD Pipeline - Deploy

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/api
  IMAGE_NAME_CLIENT: ${{ github.repository }}/client

jobs:
  # Build and Push Docker Images
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
    
    - name: Extract metadata for Client
      id: meta-client
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CLIENT }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push API Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./BookStore
        file: ./BookStore/Dockerfile
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Build and push Client Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./BookStore/client
        file: ./BookStore/client/Dockerfile
        push: true
        tags: ${{ steps.meta-client.outputs.tags }}
        labels: ${{ steps.meta-client.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        path: ./BookStore
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json

  # Optional: Deploy to Azure (SKIPPED by default - no Azure account needed)
  # Uncomment and configure AZURE_CREDENTIALS secret to enable
  # deploy-azure:
  #   name: Deploy to Azure
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   environment:
  #     name: staging
  #     url: https://bookstore-staging.azurewebsites.net
  #   
  #   steps:
  #   - name: Azure Login
  #     uses: azure/login@v2
  #     with:
  #       creds: ${{ secrets.AZURE_CREDENTIALS }}
  #   
  #   - name: Deploy to Azure Container Apps
  #     run: |
  #       az containerapp update \
  #         --name bookstore-api \
  #         --resource-group bookstore-rg \
  #         --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:main

  # Create GitHub Release for tagged versions
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate Changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "First release - showing all commits"
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          echo "Changes since $PREVIOUS_TAG"
          CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## 🚀 Release ${{ github.ref_name }}
          
          ### Changes
          ${{ steps.changelog.outputs.changelog }}
          
          ### Docker Images
          - API: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${{ github.ref_name }}`
          - Client: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CLIENT }}:${{ github.ref_name }}`
          
          ### Quick Start
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${{ github.ref_name }}
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CLIENT }}:${{ github.ref_name }}
          ```
        draft: false
        prerelease: false

  # Deployment Summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [build-and-push, create-release]
    if: always()
    
    steps:
    - name: Summary
      run: |
        echo "## 🚢 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.build-and-push.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Release | ${{ needs.create-release.result == 'success' && '✅ Created' || needs.create-release.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Images pushed to:** ${{ env.REGISTRY }}/${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Pull Images" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:main" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CLIENT }}:main" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

