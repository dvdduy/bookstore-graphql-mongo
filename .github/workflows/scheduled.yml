name: Scheduled Maintenance

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  # Dependency Security Scan
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: .NET Dependency Audit
      run: |
        cd BookStore
        dotnet list package --vulnerable --include-transitive 2>&1 | tee vulnerabilities.txt
        
        if grep -q "has the following vulnerable packages" vulnerabilities.txt; then
          echo "⚠️  Vulnerable packages found in .NET dependencies"
          cat vulnerabilities.txt
          exit 1
        fi
    
    - name: npm Audit
      run: |
        cd BookStore/client
        npm audit --audit-level=moderate
    
    - name: Create Issue if Vulnerabilities Found
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const title = '🔒 Security: Vulnerable Dependencies Detected';
          const body = `
            ## Security Alert
            
            Automated dependency scan detected vulnerable packages.
            
            **Scan Date:** ${new Date().toISOString()}
            **Workflow:** ${context.workflow}
            **Run ID:** ${context.runId}
            
            ### Action Required
            1. Review the workflow logs
            2. Update vulnerable packages
            3. Run tests to ensure compatibility
            4. Close this issue once resolved
            
            ### Useful Commands
            \`\`\`bash
            # .NET
            cd BookStore
            dotnet list package --outdated
            dotnet list package --vulnerable
            
            # npm
            cd BookStore/client
            npm audit
            npm audit fix
            \`\`\`
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'dependencies', 'automated']
          });

  # Check for Outdated Dependencies
  outdated-check:
    name: Outdated Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Check .NET Outdated Packages
      run: |
        cd BookStore
        dotnet list package --outdated > outdated-dotnet.txt
        cat outdated-dotnet.txt
    
    - name: Check npm Outdated Packages
      run: |
        cd BookStore/client
        npm outdated > outdated-npm.txt || true
        cat outdated-npm.txt
    
    - name: Upload Outdated Report
      uses: actions/upload-artifact@v4
      with:
        name: outdated-dependencies
        path: |
          BookStore/outdated-dotnet.txt
          BookStore/client/outdated-npm.txt

  # Docker Image Security Scan
  docker-security-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker Images
      run: |
        docker build -t bookstore-api:scan ./BookStore
        docker build -t bookstore-client:scan ./BookStore/client
    
    - name: Scan API Image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'bookstore-api:scan'
        format: 'table'
        exit-code: '0'
        severity: 'CRITICAL,HIGH'
    
    - name: Scan Client Image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'bookstore-client:scan'
        format: 'table'
        exit-code: '0'
        severity: 'CRITICAL,HIGH'

  # Code Quality Metrics
  code-metrics:
    name: Code Quality Metrics
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Calculate Code Statistics
      run: |
        echo "## 📊 Code Statistics" >> metrics.md
        echo "" >> metrics.md
        echo "### Lines of Code" >> metrics.md
        echo "\`\`\`" >> metrics.md
        cloc BookStore --exclude-dir=bin,obj,node_modules,dist,coverage --md >> metrics.md || echo "Install cloc for detailed stats"
        echo "\`\`\`" >> metrics.md
        echo "" >> metrics.md
        echo "### Git Statistics" >> metrics.md
        echo "- Total Commits: $(git rev-list --count HEAD)" >> metrics.md
        echo "- Contributors: $(git log --format='%an' | sort -u | wc -l)" >> metrics.md
        echo "- Branches: $(git branch -r | wc -l)" >> metrics.md
        cat metrics.md
    
    - name: Upload Metrics
      uses: actions/upload-artifact@v4
      with:
        name: code-metrics
        path: metrics.md

  # Health Check
  health-check:
    name: Production Health Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Check GitHub API Rate Limit
      run: |
        curl -s https://api.github.com/rate_limit | jq '.rate'
    
    - name: Check Docker Hub Status
      run: |
        curl -s https://status.docker.com/api/v2/status.json | jq '.'
    
    - name: System Health Summary
      run: |
        echo "## 🏥 System Health" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ All systems operational" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Checked:** $(date)" >> $GITHUB_STEP_SUMMARY

  # Cleanup Old Artifacts
  cleanup-artifacts:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    permissions:
      actions: write
    
    steps:
    - name: Delete old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const days = 30;
          const timestamp = new Date();
          timestamp.setDate(timestamp.getDate() - days);
          
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          let deletedCount = 0;
          for (const artifact of artifacts.data.artifacts) {
            const createdAt = new Date(artifact.created_at);
            if (createdAt < timestamp) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
              deletedCount++;
            }
          }
          
          core.info(`Deleted ${deletedCount} artifacts older than ${days} days`);

  # Summary
  maintenance-summary:
    name: Maintenance Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, outdated-check, docker-security-scan, code-metrics, health-check, cleanup-artifacts]
    if: always()
    
    steps:
    - name: Generate Summary
      run: |
        echo "## 🔧 Scheduled Maintenance Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Run Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Task | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Outdated Check | ${{ needs.outdated-check.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Scan | ${{ needs.docker-security-scan.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Metrics | ${{ needs.code-metrics.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Health Check | ${{ needs.health-check.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Cleanup | ${{ needs.cleanup-artifacts.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY

