name: Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  # PR Title and Description Check
  pr-check:
    name: PR Metadata Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Check PR Title
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          perf
          test
          build
          ci
          chore
          revert
        requireScope: false
    
    - name: Check PR Size
      uses: actions/github-script@v7
      with:
        script: |
          const pr = context.payload.pull_request;
          const additions = pr.additions;
          const deletions = pr.deletions;
          const changes = additions + deletions;
          
          let label = '';
          let emoji = '';
          
          if (changes < 100) {
            label = 'size/XS';
            emoji = 'üîç';
          } else if (changes < 300) {
            label = 'size/S';
            emoji = 'üìù';
          } else if (changes < 600) {
            label = 'size/M';
            emoji = 'üìä';
          } else if (changes < 1000) {
            label = 'size/L';
            emoji = 'üìö';
          } else {
            label = 'size/XL';
            emoji = 'üèîÔ∏è';
          }
          
          core.info(`${emoji} PR has ${changes} lines changed (${additions}+ ${deletions}-)`);
          core.info(`Label: ${label}`);
          
          if (changes > 1000) {
            core.warning('‚ö†Ô∏è  This PR is very large. Consider breaking it into smaller PRs.');
          }

  # Code Review Automation
  code-review:
    name: Automated Code Review
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    permissions:
      pull-requests: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run Reviewdog
      uses: reviewdog/action-setup@v1
      with:
        reviewdog_version: latest
    
    - name: Lint with Reviewdog
      run: |
        # Add custom linting commands here
        echo "Code review automation placeholder"
        # reviewdog -reporter=github-pr-review

  # Conflict Detection
  conflict-check:
    name: Check for Conflicts
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for merge conflicts
      run: |
        git fetch origin ${{ github.base_ref }}
        if git merge-tree $(git merge-base HEAD origin/${{ github.base_ref }}) HEAD origin/${{ github.base_ref }} | grep -q '<<<<<<<'; then
          echo "‚ùå This PR has merge conflicts with ${{ github.base_ref }}"
          echo "Please resolve conflicts before merging"
          exit 1
        else
          echo "‚úÖ No merge conflicts detected"
        fi

  # Test Coverage Check
  coverage-check:
    name: Test Coverage Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: BookStore/client/package-lock.json
    
    - name: Backend Coverage
      run: |
        dotnet test BookStore/BookStore.UnitTests/BookStore.UnitTests.csproj \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage
    
    - name: Frontend Coverage
      run: |
        cd BookStore/client
        npm ci
        npm test -- --watch=false --browsers=ChromeHeadless --code-coverage
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage/**/coverage.cobertura.xml,./BookStore/client/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  # Security Scan
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance Benchmark
  performance-check:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Build API
      run: dotnet build BookStore/BookStore.API/BookStore.API.csproj --configuration Release
    
    - name: Benchmark
      run: |
        echo "## ‚ö° Performance Metrics" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build Time | $(date +%s) seconds |" >> $GITHUB_STEP_SUMMARY
        echo "| Binary Size | $(du -sh BookStore/BookStore.API/bin/Release/net9.0/ | cut -f1) |" >> $GITHUB_STEP_SUMMARY

  # PR Summary
  pr-summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [pr-check, code-review, conflict-check, coverage-check, security-scan, performance-check]
    if: always() && github.event.pull_request.draft == false
    permissions:
      pull-requests: write
    
    steps:
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const checks = {
            'PR Check': '${{ needs.pr-check.result }}',
            'Code Review': '${{ needs.code-review.result }}',
            'Conflict Check': '${{ needs.conflict-check.result }}',
            'Coverage Check': '${{ needs.coverage-check.result }}',
            'Security Scan': '${{ needs.security-scan.result }}',
            'Performance': '${{ needs.performance-check.result }}'
          };
          
          let body = '## üîç PR Validation Results\n\n';
          body += '| Check | Status |\n';
          body += '|-------|--------|\n';
          
          for (const [check, result] of Object.entries(checks)) {
            const emoji = result === 'success' ? '‚úÖ' : result === 'skipped' ? '‚è≠Ô∏è' : '‚ùå';
            body += `| ${check} | ${emoji} ${result} |\n`;
          }
          
          body += '\n---\n';
          body += '*This comment is automatically generated by the CI pipeline*\n';
          
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: body
          });

