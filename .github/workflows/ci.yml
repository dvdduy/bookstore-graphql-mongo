name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend .NET Tests
  backend-tests:
    name: Backend Tests (.NET 9)
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Restore dependencies
      run: dotnet restore BookStore/BookStore.sln
    
    - name: Build
      run: dotnet build BookStore/BookStore.sln --configuration Release --no-restore
    
    - name: Run Unit Tests
      run: dotnet test BookStore/BookStore.UnitTests/BookStore.UnitTests.csproj --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=unit-test-results.trx"
    
    - name: Run Integration Tests
      run: dotnet test BookStore/BookStore.IntegrationTests/BookStore.IntegrationTests.csproj --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=integration-test-results.trx"
      env:
        MongoDbConfiguration__ConnectionString: mongodb://localhost:27017
        MongoDbConfiguration__Database: BookStoreTestDB
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          **/TestResults/*.trx
    
    - name: Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Backend Test Results
        path: '**/TestResults/*.trx'
        reporter: dotnet-trx
        fail-on-error: false

  # Frontend Angular Tests
  frontend-tests:
    name: Frontend Tests (Angular 18)
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: BookStore/client
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: BookStore/client/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint
      run: npm run lint --if-present || echo "No lint script found"
    
    - name: Run Unit Tests
      run: npm test -- --watch=false --browsers=ChromeHeadless --code-coverage
    
    - name: Upload Coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-coverage
        path: BookStore/client/coverage/
    
    - name: Build Production
      run: npm run build -- --configuration production
    
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: BookStore/client/dist/

  # Code Quality & Security Scan
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for SonarCloud
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v4
      with:
        languages: 'csharp,javascript'
    
    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Build for CodeQL
      run: dotnet build BookStore/BookStore.sln --configuration Release
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      if: github.event_name == 'pull_request'

  # Docker Build Validation
  docker-build:
    name: Docker Build Validation
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Backend Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./BookStore
        file: ./BookStore/Dockerfile
        push: false
        tags: bookstore-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build Frontend Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./BookStore/client
        file: ./BookStore/client/Dockerfile
        push: false
        tags: bookstore-client:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker Compose
      run: |
        docker compose -f docker-compose.yml config
        echo "Docker Compose configuration is valid"

  # Build Summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, code-quality, docker-build]
    if: always()
    
    steps:
    - name: Check Build Status
      run: |
        echo "## 🚀 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.docker-build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

